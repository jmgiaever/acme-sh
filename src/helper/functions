#!/usr/bin/env bash

function amiroot {
    if [ `id -gn` = "root" ]; then
        echo "root"
        return 0
    fi
    echo `id -un`
    return 1
}

function get_real_user {
    _USER=`id -un "${SUDO_USER}"`
    if [ $? -eq 0 ]; then
        echo "${_USER}"
        return 0
    fi
    return 1
}

function get_user_home {
    _HOME=`eval echo "~${1}"`
    if [ $? -eq 0 ]; then
        echo "${_HOME}"
        return 0
    fi
    return 1
}

function str_connection {
    basename ${1} ".pub"
}

function str_cert {
    basename "${1}" ".conf"
}

function f_exists_echo {
    if [ -f "${1}" ]; then
        echo "${1}"
        return 0
    fi
    return 1
}

function ca_cert {
    f_exists_echo "`dirname "${1}"`/ca.cer"
}

function fullchain {
    f_exists_echo "`dirname "${1}"`/fullchain.cer"
    return $?
}

function ssl_cert {
    f_exists_echo "`dirname "${1}"`/`str_cert "${1}"`.cer"
    return $?
}

function ssl_key {
    f_exists_echo "`dirname "${1}"`/`str_cert "${1}"`.key"
    return $?
}

function gpg_start_agent {
    gpg-agent 2> /dev/null
    if [ $? -ne 0 ]; then
        logger "GPG-agent not here"
        gpg-agent --daemon 2> /dev/null
        if [ $? -eq 0 ]; then
            logger "GPG-agent started"
        fi
        logger "Failed starting GPG-agent, trying without"
    fi
    return 0
}

function gpg_close_agent {
    PID=`ps -T | grep gpg-agent | head -n 1 | cut -d' ' -f1`
    if [ -n "${PID}" ]; then
        logger "Kill GPG-agent: ${PID}"
        kill -9 "${PID}" >> /dev/null
    fi
}

function gpg_encrypt_cert {

    CA=`ca_cert "${1}"`
    FULLCHAIN=`fullchain "${1}"`
    SSL_CERT=`ssl_cert "${1}"`
    SSL_KEY=`ssl_key "${1}"`

    NEW_CA_BASE="chain.pem.gpg"
    NEW_FULLCHAIN_BASE="fullchain.pem.gpg"
    NEW_SSL_CERT_BASE="cert.pem.gpg"
    NEW_SSL_KEY_BASE="privkey.pem.gpg"

    PRIVATE_CERTS_DIR="`dirname "${2}"`/encrypted/`str_cert "${1}"`"

    if [ ! -d "${PRIVATE_CERTS_DIR}" ]; then
        mkdir "${PRIVATE_CERTS_DIR}"
        chmod 1755 "${PRIVATE_CERTS_DIR}"
    fi

    gpg_start_agent
    GPG_TMP_DIR=`mktemp -d`
    gpg --homedir="${GPG_TMP_DIR}" --batch --yes --quiet \
        --recipient-file "${2}" \
        -o "${PRIVATE_CERTS_DIR}/${NEW_CA_BASE}" \
        -e "${CA}"
    gpg --homedir="${GPG_TMP_DIR}" --batch --yes -quiet \
        --recipient-file "${2}" \
        -o "${PRIVATE_CERTS_DIR}/${NEW_FULLCHAIN_BASE}" \
        -e "${FULLCHAIN}"
    gpg --homedir="${GPG_TMP_DIR}" --batch --yes --quiet \
        --recipient-file "${2}" \
        -o "${PRIVATE_CERTS_DIR}/${NEW_SSL_CERT_BASE}" \
        -e "${SSL_CERT}"
    gpg --homedir="${GPG_TMP_DIR}" --batch --yes -quiet \
        --recipient-file "${2}" \
        -o "${PRIVATE_CERTS_DIR}/${NEW_SSL_KEY_BASE}" \
        -e "${SSL_KEY}"
    rm -rf "${GPG_TMP_DIR}"
    touch "${PRIVATE_CERTS_DIR}/.time"
    echo "Released `str_cert "${1}"` for connection `str_connection "$2"`"
    logger "Released `str_cert "${1}"` for connection `str_connection "$2"`"
    gpg_close_agent
}

function update_connections {
    USER_DATA="${COMMON_USER_DIR}/${USER}"
    DOMAIN=$1
    if [ "${DOMAIN}" = "" ]; then 
        DOMAIN="*"
    fi
    readarray -d '' DOMAINS < <(find ${USER_DATA} -type f -name "${DOMAIN}.conf" -not -path "${USER_DATA}/ca/*" -not -name "*csr.conf" -print0)
    for DOMAIN_CONF in "${DOMAINS[@]}"; do
        logger "Updating connection for `str_cert "${DOMAIN_CONF}"`"
        DOMAIN_DIR=`dirname "${DOMAIN_CONF}"`
        CERT_MOD=`stat "${DOMAIN_DIR}/fullchain.cer" --format="%Y"`
        if [ `ls "${COMMON_CERTS}"* 2> /dev/null | grep "certs" | wc -l` -ne 0 ]; then
            readarray -d '' CONNECTIONS < <(find "${COMMON_CERTS}"* -type d -name "`basename "${DOMAIN_CONF}" ".conf"`" -print0)
            for CONNECTION in "${CONNECTIONS[@]}"; do
                CONN_MOD=`stat "${CONNECTION}/.time" --format="%Y" 2> /dev/null || echo 0`
                if [ "${CERT_MOD}" -gt "${CONN_MOD}" ]; then
                    KEY="`find "${CONNECTION}/../../" -maxdepth 1 -type f -name "*.pub" -print`"
                    if [ -r "${KEY}" ]; then
                        logger "Certificate updated `str_connection "${KEY}"`:`str_cert "${DOMAIN_CONF}"`, releasing..."
                        gpg_encrypt_cert "${DOMAIN_CONF}" "${KEY}"
                    fi
                fi
            done
        else
            logger "No connections for `str_cert "${DOMAIN_CONF}"`"
        fi
    done
}
