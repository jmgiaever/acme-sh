#!/usr/bin/env bash
#printenv

source "${SNAP}/helper/variables"
source "${SNAP}/helper/functions"

if [ `amiroot` = "root" ]; then
    echo "Root, mkey. Not.";
    exit 1
fi

USER_DATA="${COMMON_USER_DIR}/${USER}"

export LE_CONFIG_HOME="${USER_DATA}"
export ACCOUNT_CONF_PATH="${LE_CONFIG_HOME}/account.sh.env"
export CERT_HOME="${LE_CONFIG_HOME}/certs"
export CA_HOME="${LE_CONFIG_HOME}/ca"

if [ ! -d "${USER_DATA}" ]; then
    if [ ! -f "${SSH_PUB_KEY}" ]; then
        echo "Error: Public key is missing."
        exit 1
    fi

    mkdir "${USER_DATA}"
    chmod 0700 "${USER_DATA}"

    echo ""
    echo "Regarding automatic renewal"
    echo ""
    echo "The following public-key:"
    echo "> > > > > > > > > > > > >"
    echo ""
    echo -e "\e[32m`cat "${SSH_PUB_KEY}"`\e[0m"
    echo ""
    echo "> > > > > > > > > > > > >"
    echo "must be copied to the file: "
    echo "> `get_user_home "${USER}"`/.ssh/authorized_keys"
    echo ""
    echo "You can add the key with the following command:"
    echo ""
    echo -e "$ \e[32macme-sh.pub-key >> `get_user_home "${USER}"`/.ssh/authorized_keys\e[0m \\"
    echo -e "  \e[32m&& chmod 0600 `get_user_home "${USER}"`/.ssh/authorized_keys\e[0m"
    echo ""
    echo "This is important if you want the daemon to be able"
    echo "to renew your certificates."
    echo ""
    echo "If you want to update your certificates manually, just"
    echo "skip this step."
    echo ""
    read -p "Press any key when you're ready to resume."

    touch "${ACCOUNT_CONF_PATH}"
    mkdir "${CERT_HOME}"
    mkdir "${CA_HOME}"

    echo ""
    echo "Please take your time to read the help 'acme-sh --help', and"
    echo " - "https://github.com/acmesh-official/acme.sh
    echo ""
    echo "If you want to use the DNS manual mode, READ this:"
    echo " - https://github.com/acmesh-official/acme.sh/wiki/dns-manual-mode"
    echo " - https://github.com/acmesh-official/acme.sh#9-use-dns-manual-mode"
    echo " - AND note that adding the TXT-record to your DNS can take time to"
    echo "   update. It's recommended to wait 10 minutes between --issue and --renew"
    echo ""
    echo "For apps that need to read certificates, they must support the 'certs'"
    echo "plug and be connected throug plugs/slots and by acme-sh.connect."
    echo "However classic snaps can read it from your home directory."
    echo ""
    echo "Do not manually edit any of the data in the diretory: ${LOCAL_USER_DIR}"
    echo " - yes, we know you have 'rwx'-rights - but let's acme-sh manage them."
    echo ""
    read -p "Press any key when you're ready to resume."
fi

LOCATIONS=(
${ACCOUNT_CONF_PATH}
${CERT_HOME}
${CA_HOME}
)

if [ ! -d "${LE_CONFIG_HOME}" ]; then
    echo "Config-home is missing"
    exit 1
fi

for DIR in "${LOCATIONS[@]}"; do
    if [ -d "${DIR}" -a -x "${DIR}" ]; then
        if [[ -r "${DIR}" ]] || [[ -w "${DIR}" ]]; then
            continue
        fi
    elif [ -w "${DIR}" -a -r "${DIR}" ]; then
        if [[ -r "${DIR}" ]] || [[ -w "${DIR}" ]]; then
            continue
        fi
    fi
    echo "Error: ${DIR} is missing or has invalid permissions."
    exit 1
done

echo $@

ARGC=$#
ARGV=("$@")
DOMAIN=""
RENEW=1
for ((i = 0; i < ${ARGC}; i++)); do
    ARGX="${ARGV[$i]}"
    if [ "${ARGX}" = "--renew" -o "${ARGX}" = "--renew-all" ]; then
        set -- "$@" "--yes-I-know-dns-manual-mode-enough-go-ahead-please"
        RENEW=0
    elif [ "${ARGX}" = "-d" -o "${ARGX}" = "--domain" ]; then
        DOMAIN="${ARGV[`expr $i + 1`]}"
    fi
done

eval $@ 
RET=$?

if [ "${RET}" -eq 0 -a "${RENEW}" -eq 0 ]; then
    update_connections "${DOMAIN}"
    exit $?
fi

exit $?
