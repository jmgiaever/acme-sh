name: acme-sh
base: core20
version: '2.8.8'
summary: 'An ACME Shell script: acme.sh'
description: |
  An ACME protocol client written purely in Shell (Unix shell) language 
  - Full ACME protocol implementation.
  - Support ACME v1 and ACME v2
  - Support ACME v2 wildcard certs
  - Simple, powerful and very easy to use. You only need 3 minutes to learn it.
  - Bash, dash and sh compatible.
  - Simplest shell script for Let's Encrypt free certificate client.
  - Purely written in Shell with no dependencies on python or the official Let's Encrypt client.
  - Just one script to issue, renew and install your certificates automatically.
  - DOES NOT require root/sudoer access.
  - Docker friendly
  - IPv6 support
  - Cron job notifications for renewal or error etc.
  - It's probably the easiest & smartest shell script to automatically issue & renew the free certificates from Let's Encrypt.

  Wiki: https://github.com/acmesh-official/acme.sh/wiki

  BE AWARE that this version do not include all it's features, such as
  - notify
  - crontabs (instead it uses a daemon)
  - running commands outside of its own filesystem
    - but if you need to copy certificates, see the certs-plug 
assumes: 
  - command-chain

grade: stable # must be 'stable' to release into candidate/stable channels
confinement: strict # use 'strict' once you have the right plugs and slots

# architectures:
#   - build-on: arm64
#   - build-on: amd64
#
hooks:
  connect-plug-certs:
    plugs: [network, network-bind]

apps:
  acme-sh:
    environment:
      LE_WORKING_DIR: $SNAP
    command-chain: [ bin/init ]
    command: bin/acme.sh
    plugs:
      - network
      - network-bind
  connect:
    command: bin/connect
    plugs:
      - certs
      - network
      - network-bind
  dns-manual:
    environment:
      LE_WORKING_DIR: $SNAP
    command-chain: [ bin/init ]
    command: bin/acme.sh --dns --yes-I-know-dns-manual-mode-enough-go-ahead-please
    plugs:
      - network
      - network-bind
  pub-key:
    command: bin/pub-key
  renew-daemon:
    daemon: oneshot
    restart-condition: always
    timer: 00:00~24:00/2 # Twice a day..
    command: bin/renew-daemon
    plugs:
      - network
      - network-bind
      - certs

plugs:
  certs:
    interface: content
    content: certs
    target: $SNAP_DATA/certs

hooks:
  connect-plug-certs:
    plugs: [certs]

parts:
  acme-sh:
    plugin: nil
    source: https://github.com/acmesh-official/acme.sh.git
    source-tag: ${SNAPCRAFT_PROJECT_VERSION}
    override-build: |
      set -e
      sed -i 's#DEFAULT_INSTALL_HOME="$HOME/.$PROJECT_NAME"#DEFAULT_INSTALL_HOME="$SNAP/.$PROJECT_NAME"#g' $SNAPCRAFT_PART_BUILD/acme.sh
      echo $SNAPCRAFT_PART_INSTALL
      export LE_CONFIG_HOME=$SNAPCRAFT_PART_INSTALL
      export LE_WORKING_DIR=$SNAPCRAFT_PART_INSTALL
      export HOME=$SNAPCRAFT_PART_INSTALL
      ${SNAPCRAFT_PART_BUILD}/acme.sh --install --nocron
      chmod a+x ${SNAPCRAFT_PART_INSTALL}/acme.sh
      sed -i 's#LE_WORKING_DIR="/root/parts/acme-sh/install"#LE_WORKING_DIR="$SNAP"#g' $SNAPCRAFT_PART_INSTALL/acme.sh.env
      sed -i 's#acme.sh="/root/parts/acme-sh/install/acme.sh"#acme.sh="$SNAP/acme.sh"#g' $SNAPCRAFT_PART_INSTALL/acme.sh.env
    stage:
      - bin/acme.sh
      - acme.sh.env
      - account.conf
      - deploy
      - dnsapi
      - notify
      - etc
      - usr
    stage-packages:
      - openssl
      - socat
      - curl
      - xxd
    organize:
      acme.sh: bin/acme.sh
  scripts:
    plugin: dump
    source: ./src
    source-type: local
    organize:
      connect: bin/connect
      init: bin/init
      pub-key: bin/pub-key
      publish-daemon: bin/publish-daemon
      renew-daemon: bin/renew-daemon
    stage-packages:
      - rsync
      - openssh-client
      - gpg
      - gpg-agent
